df2$p1 <- predict(mm, newdata=df2)[,1]
# models ==============================================================================================================
df$resp <- as.numeric(df$response > -0.5)
table(df$resp)
# models ==============================================================================================================
df$resp <- as.numeric(df$response > 0.5)
table(df$resp)
# models ==============================================================================================================
df$resp <- as.numeric(df$response > -1)
table(df$resp)
# models ==============================================================================================================
df$resp <- as.numeric(df$response > -2)
table(df$resp)
# models ==============================================================================================================
df$resp <- as.numeric(df$response > -3)
table(df$resp)
m.lm <- lm(response~predictor+p2, data=df)
m.glm <- glm(resp~predictor + poly(p2, 2), data=df, family=binomial)
m.lm <- lm(response~p1+p2, data=df)
m.glm <- glm(resp~p1 + poly(p2, 2), data=df, family=binomial)
# models ==============================================================================================================
df$resp <- as.numeric(df$response > -2)
table(df$resp)
m.glm <- glm(resp~p1 + poly(p2, 2), data=df, family=binomial)
# models ==============================================================================================================
df$resp <- as.numeric(df$response > -3)
table(df$resp)
m.lm <- lm(response~p1+p2, data=df)
m.glm <- glm(resp~p1 + poly(p2, 2), data=df, family=binomial)
m.gam <- gam(response~s(p1), data=df)
m.glm <- glm(resp~p1 + p2, data=df, family=binomial)
m.gam <- gam(response~s(p1), data=df)
m.rf <- ranger(response~p1+p2, data=df)
m <- m.lm
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(predictor=r.pred), method="kriging")
ms.rf <- simulate_null_models(m.rf, df, radius = 100, pred_ras=list(predictor=r.pred), method="kriging")
table(sapply(ms, is.null))
coef_tab(ms)
pred_tab(ms, "AIC")
coef_plot(ms)
effect_plot(m, ms, df, preds=c("predictor"))
?append
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
pred_tab(ms, "AIC")
coef_tab(ms)
pred_tab(ms, "p")
pred_tab(ms, "r2")
?do.call
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
pred_tab(ms)
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
pred_tab(ms)
pred_tab(ms)
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
pred_tab(ms)
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
pred_tab(ms)
coef_plot(ms)
source("R/summarize_null_models.R")
pred_tab(ms)
coef_tab(ms)
coef_plot(ms)
coef_plot(m, ms)
source("R/summarize_null_models.R")
coef_plot(m, ms)
#' coefficient based on a set of null model objects. These null models are typically created by the function
#' simulate_null_models from the same package. The plots are based on (and thus require) ggplot2 package.
#'
#' @param model A fitted model object. Currently, objects of classes 'lm', 'glm', and 'gam' are supported.
#' @param null_models A list of model objects of the same class as model representing simulations of a null model.
#' @param coefs An optional character vector specifying which model coefficients should be inferred. If not specified,
#' the inference is made for all model coefficients.
#' @return A ggplot with a facet for each model coefficient, plotting its observed value (red line) on a density of
#' its null distribution as well as 0.025, 0.5, and 0.975 quantiles.
#' @export
coef_plot <- function(model, null_models, coefs=NULL)
{
require(ggplot2)
if (is.null(coefs)) coefs <- names(coef(model))
coefs <- coefs[coefs %in% names(coef(model))[!is.na(coef(model))]]
obs.coef <- as.data.frame(coef(model)[coefs])
colnames(obs.coef) <- "value"
obs.coef$name <- rownames(obs.coef)
obs.coef$quant <- "Observed"
null.coef <- as.data.frame(do.call(rbind, lapply(null_models, function(m) coef(m)[coefs])))
ylims <- apply(null.coef, 2, function(col) max(stats::density(na.omit(col))$y))
obs.coef$ylim <- ylims
ci <- t(apply(null.coef, 2, function(col) quantile(col, c(0.025,0.5,0.975))))
ci <- rbind(data.frame(value=ci[,1],name=rownames(ci),quant=colnames(ci)[1],ylim=ylims),
data.frame(value=ci[,2],name=rownames(ci),quant=colnames(ci)[2],ylim=ylims),
data.frame(value=ci[,3],name=rownames(ci),quant=colnames(ci)[3],ylim=ylims))
ci <- rbind(ci, obs.coef)
null.coef <- do.call(rbind, lapply(names(null.coef), function(col){
data.frame(value=null.coef[,col], name=col)
}))
# ggplot(null.coef, aes(x=value)) +
#   geom_density(fill="grey", alpha=.3) +
#   geom_segment(aes(x=value, xend=value, y=0, yend=ylim, lty=quant, color=quant), data=ci) +
#   facet_wrap(~name, scales="free") +
#   scale_linetype_manual(values = c(2,1,2,1)) +
#   scale_color_manual(values=c("black","black","black","red")) +
#   labs(y="Density", linetype="Quantiles", color="Quantiles")
null.coef
}
coef_plot(m, ms)
print(null.coef)
#' coefficient based on a set of null model objects. These null models are typically created by the function
#' simulate_null_models from the same package. The plots are based on (and thus require) ggplot2 package.
#'
#' @param model A fitted model object. Currently, objects of classes 'lm', 'glm', and 'gam' are supported.
#' @param null_models A list of model objects of the same class as model representing simulations of a null model.
#' @param coefs An optional character vector specifying which model coefficients should be inferred. If not specified,
#' the inference is made for all model coefficients.
#' @return A ggplot with a facet for each model coefficient, plotting its observed value (red line) on a density of
#' its null distribution as well as 0.025, 0.5, and 0.975 quantiles.
#' @export
coef_plot <- function(model, null_models, coefs=NULL)
{
require(ggplot2)
if (is.null(coefs)) coefs <- names(coef(model))
coefs <- coefs[coefs %in% names(coef(model))[!is.na(coef(model))]]
obs.coef <- as.data.frame(coef(model)[coefs])
colnames(obs.coef) <- "value"
obs.coef$name <- rownames(obs.coef)
obs.coef$quant <- "Observed"
null.coef <- as.data.frame(do.call(rbind, lapply(null_models, function(m) coef(m)[coefs])))
print(null.coef)
ylims <- apply(null.coef, 2, function(col) max(stats::density(na.omit(col))$y))
obs.coef$ylim <- ylims
ci <- t(apply(null.coef, 2, function(col) quantile(col, c(0.025,0.5,0.975))))
ci <- rbind(data.frame(value=ci[,1],name=rownames(ci),quant=colnames(ci)[1],ylim=ylims),
data.frame(value=ci[,2],name=rownames(ci),quant=colnames(ci)[2],ylim=ylims),
data.frame(value=ci[,3],name=rownames(ci),quant=colnames(ci)[3],ylim=ylims))
ci <- rbind(ci, obs.coef)
null.coef <- do.call(rbind, lapply(names(null.coef), function(col){
data.frame(value=null.coef[,col], name=col)
}))
ggplot(null.coef, aes(x=value)) +
geom_density(fill="grey", alpha=.3) +
geom_segment(aes(x=value, xend=value, y=0, yend=ylim, lty=quant, color=quant), data=ci) +
facet_wrap(~name, scales="free") +
scale_linetype_manual(values = c(2,1,2,1)) +
scale_color_manual(values=c("black","black","black","red")) +
labs(y="Density", linetype="Quantiles", color="Quantiles")
}
coef_plot(m, ms)
#' coefficient based on a set of null model objects. These null models are typically created by the function
#' simulate_null_models from the same package. The plots are based on (and thus require) ggplot2 package.
#'
#' @param model A fitted model object. Currently, objects of classes 'lm', 'glm', and 'gam' are supported.
#' @param null_models A list of model objects of the same class as model representing simulations of a null model.
#' @param coefs An optional character vector specifying which model coefficients should be inferred. If not specified,
#' the inference is made for all model coefficients.
#' @return A ggplot with a facet for each model coefficient, plotting its observed value (red line) on a density of
#' its null distribution as well as 0.025, 0.5, and 0.975 quantiles.
#' @export
coef_plot <- function(model, null_models, coefs=NULL)
{
require(ggplot2)
if (is.null(coefs)) coefs <- names(coef(model))
coefs <- coefs[coefs %in% names(coef(model))[!is.na(coef(model))]]
obs.coef <- as.data.frame(coef(model)[coefs])
colnames(obs.coef) <- "value"
obs.coef$name <- rownames(obs.coef)
obs.coef$quant <- "Observed"
null.coef <- as.data.frame(do.call(rbind, lapply(null_models, function(m) m$coefs)))
print(null.coef)
ylims <- apply(null.coef, 2, function(col) max(stats::density(na.omit(col))$y))
obs.coef$ylim <- ylims
ci <- t(apply(null.coef, 2, function(col) quantile(col, c(0.025,0.5,0.975))))
ci <- rbind(data.frame(value=ci[,1],name=rownames(ci),quant=colnames(ci)[1],ylim=ylims),
data.frame(value=ci[,2],name=rownames(ci),quant=colnames(ci)[2],ylim=ylims),
data.frame(value=ci[,3],name=rownames(ci),quant=colnames(ci)[3],ylim=ylims))
ci <- rbind(ci, obs.coef)
null.coef <- do.call(rbind, lapply(names(null.coef), function(col){
data.frame(value=null.coef[,col], name=col)
}))
ggplot(null.coef, aes(x=value)) +
geom_density(fill="grey", alpha=.3) +
geom_segment(aes(x=value, xend=value, y=0, yend=ylim, lty=quant, color=quant), data=ci) +
facet_wrap(~name, scales="free") +
scale_linetype_manual(values = c(2,1,2,1)) +
scale_color_manual(values=c("black","black","black","red")) +
labs(y="Density", linetype="Quantiles", color="Quantiles")
}
coef_plot(m, ms)
#' coefficient based on a set of null model objects. These null models are typically created by the function
#' simulate_null_models from the same package. The plots are based on (and thus require) ggplot2 package.
#'
#' @param model A fitted model object. Currently, objects of classes 'lm', 'glm', and 'gam' are supported.
#' @param null_models A list of model objects of the same class as model representing simulations of a null model.
#' @param coefs An optional character vector specifying which model coefficients should be inferred. If not specified,
#' the inference is made for all model coefficients.
#' @return A ggplot with a facet for each model coefficient, plotting its observed value (red line) on a density of
#' its null distribution as well as 0.025, 0.5, and 0.975 quantiles.
#' @export
coef_plot <- function(model, null_models, coefs=NULL)
{
require(ggplot2)
if (is.null(coefs)) coefs <- names(coef(model))
coefs <- coefs[coefs %in% names(coef(model))[!is.na(coef(model))]]
obs.coef <- as.data.frame(coef(model)[coefs])
colnames(obs.coef) <- "value"
obs.coef$name <- rownames(obs.coef)
obs.coef$quant <- "Observed"
null.coef <- as.data.frame(do.call(rbind, lapply(null_models, function(m) m$coefs)))
ylims <- apply(null.coef, 2, function(col) max(stats::density(na.omit(col))$y))
obs.coef$ylim <- ylims
ci <- t(apply(null.coef, 2, function(col) quantile(col, c(0.025,0.5,0.975))))
ci <- rbind(data.frame(value=ci[,1],name=rownames(ci),quant=colnames(ci)[1],ylim=ylims),
data.frame(value=ci[,2],name=rownames(ci),quant=colnames(ci)[2],ylim=ylims),
data.frame(value=ci[,3],name=rownames(ci),quant=colnames(ci)[3],ylim=ylims))
ci <- rbind(ci, obs.coef)
null.coef <- do.call(rbind, lapply(names(null.coef), function(col){
data.frame(value=null.coef[,col], name=col)
}))
ggplot(null.coef, aes(x=value)) +
geom_density(fill="grey", alpha=.3) +
geom_segment(aes(x=value, xend=value, y=0, yend=ylim, lty=quant, color=quant), data=ci) +
facet_wrap(~name, scales="free") +
scale_linetype_manual(values = c(2,1,2,1)) +
scale_color_manual(values=c("black","black","black","red")) +
labs(y="Density", linetype="Quantiles", color="Quantiles")
}
coef_plot(m, ms)
effect_plot(m, ms)
effect_plot(m, ms, data=df)
m.rf$predictions
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(predictor=r.pred), method="kriging")
sums <- summarize_null_models(ms, df)
source("R/summarize_null_models.R")
source("R/simulate_null_models.R")
sums <- summarize_null_models(ms, df)
coef_tab(ms)
coef_tab(sums)
pred_tab(sums)
coef_plot(ms)
source("R/summarize_null_models.R")
coef_plot(ms)
coef_plot(sums)
coef_plot(sums, df)
source("R/summarize_null_models.R")
coef_plot(sums, df)
coef_plot(sums)
coef_plot(m, sums)
coef_plot(m, ms)
#' coefficient based on a set of null model objects. These null models are typically created by the function
#' simulate_null_models from the same package. The plots are based on (and thus require) ggplot2 package.
#'
#' @param model A fitted model object. Currently, objects of classes 'lm', 'glm', and 'gam' are supported.
#' @param null_models A list of model objects of the same class as model representing simulations of a null model.
#' @param coefs An optional character vector specifying which model coefficients should be inferred. If not specified,
#' the inference is made for all model coefficients.
#' @return A ggplot with a facet for each model coefficient, plotting its observed value (red line) on a density of
#' its null distribution as well as 0.025, 0.5, and 0.975 quantiles.
#' @export
coef_plot <- function(model, null_model_sums, coefs=NULL)
{
require(ggplot2)
if (is.null(coefs)) coefs <- names(null_model_sums[[1]]$coefs)
coefs <- coefs[coefs %in% names(null_model_sums[[1]]$coefs)[!is.na(null_model_sums[[1]]$coefs)]]
obs.coef <- as.data.frame(null_model_sums[[1]]$coefs[coefs])
colnames(obs.coef) <- "value"
obs.coef$name <- rownames(obs.coef)
obs.coef$quant <- "Observed"
null.coef <- as.data.frame(do.call(rbind, lapply(null_model_sums[2:length(null_model_sums)], function(s) s$coefs)))
ylims <- apply(null.coef, 2, function(col) max(stats::density(na.omit(col))$y))
obs.coef$ylim <- ylims
ci <- t(apply(null.coef, 2, function(col) quantile(col, c(0.025,0.5,0.975))))
ci <- rbind(data.frame(value=ci[,1],name=rownames(ci),quant=colnames(ci)[1],ylim=ylims),
data.frame(value=ci[,2],name=rownames(ci),quant=colnames(ci)[2],ylim=ylims),
data.frame(value=ci[,3],name=rownames(ci),quant=colnames(ci)[3],ylim=ylims))
ci <- rbind(ci, obs.coef)
null.coef <- do.call(rbind, lapply(names(null.coef), function(col){
data.frame(value=null.coef[,col], name=col)
}))
ggplot(null.coef, aes(x=value)) +
geom_density(fill="grey", alpha=.3) +
geom_segment(aes(x=value, xend=value, y=0, yend=ylim, lty=quant, color=quant), data=ci) +
facet_wrap(~name, scales="free") +
scale_linetype_manual(values = c(2,1,2,1)) +
scale_color_manual(values=c("black","black","black","red")) +
labs(y="Density", linetype="Quantiles", color="Quantiles")
}
coef_plot(m, ms)
model <- m
null_models_sums <- sums
coefs <- NULL
if (is.null(coefs)) coefs <- names(null_model_sums[[1]]$coefs)
null_model_sums <- sums
if (is.null(coefs)) coefs <- names(null_model_sums[[1]]$coefs)
coefs <- coefs[coefs %in% names(null_model_sums[[1]]$coefs)[!is.na(null_model_sums[[1]]$coefs)]]
obs.coef <- as.data.frame(null_model_sums[[1]]$coefs[coefs])
View(obs.coef)
colnames(obs.coef) <- "value"
View(obs.coef)
obs.coef$name <- rownames(obs.coef)
View(obs.coef)
obs.coef$quant <- "Observed"
null.coef <- as.data.frame(do.call(rbind, lapply(null_model_sums[2:length(null_model_sums)], function(s) s$coefs)))
View(null.coef)
ylims <- apply(null.coef, 2, function(col) max(stats::density(na.omit(col))$y))
obs.coef$ylim <- ylims
ci <- t(apply(null.coef, 2, function(col) quantile(col, c(0.025,0.5,0.975))))
ci <- rbind(data.frame(value=ci[,1],name=rownames(ci),quant=colnames(ci)[1],ylim=ylims),
data.frame(value=ci[,2],name=rownames(ci),quant=colnames(ci)[2],ylim=ylims),
data.frame(value=ci[,3],name=rownames(ci),quant=colnames(ci)[3],ylim=ylims))
ci <- rbind(ci, obs.coef)
View(ci)
null.coef <- do.call(rbind, lapply(names(null.coef), function(col){
data.frame(value=null.coef[,col], name=col)
}))
View(null.coef)
ggplot(null.coef, aes(x=value)) +
geom_density(fill="grey", alpha=.3) +
geom_segment(aes(x=value, xend=value, y=0, yend=ylim, lty=quant, color=quant), data=ci) +
facet_wrap(~name, scales="free") +
scale_linetype_manual(values = c(2,1,2,1)) +
scale_color_manual(values=c("black","black","black","red")) +
labs(y="Density", linetype="Quantiles", color="Quantiles")
coef_plot(m, sums)
effect_plot(m, ms, df, preds=c("predictor"))
effect_plot(m, ms, df)
effect_plot(m, ms, df, preds=c("p1"))
effect_plot(m, ms, df)
m <- m.glm
m <- m.glm
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(predictor=r.pred), method="kriging")
sums <- summarize_null_models(ms, df)
coef_tab(sums)
summary(m)
coef_tab(sums)
pred_tab(sums)
coef_plot(m, sums)
effect_plot(m, ms, df)
?predict.glm
predict(m, type="terms")
m <- m.gam
summary(m)
m.gam <- gam(response~s(p1) + s(p2), data=df)
m <- m.gam
summary(m)
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(predictor=r.pred), method="kriging")
sums <- summarize_null_models(ms, df)
coef_tab(sums)
pred_tab(sums)
coef_plot(m, sums)
effect_plot(m, ms, df)
m <- m.rf
summary(m)
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(predictor=r.pred), method="kriging")
sums <- summarize_null_models(ms, df)
terms(m.rf)
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
sums <- summarize_null_models(ms, df)
m$call
all.vars(m$call)
all.vars(delete.reponse(m$call))
all.vars(delete.response(m$call))
all.vars(m$call)
terms(m$call)
mc <- m$call
class(ms)
class(mc)
methods(call)
methods("call")
call
sums <- summarize_null_models(ms, df)
class(ms)
class(ms[[1]])
call(ms[[1]])
ms[[1]]$call
all.vars(ms[[1]]$call)
as.character(ms[[1]]$call)
as.character(ms[[1]]$call)[2]
strsplit(as.character(ms[[1]]$call)[2], " ~ ")
strsplit(as.character(ms[[1]]$call)[2], " ~ ")[2]
strsplit(as.character(ms[[1]]$call)[2], " ~ ")[[1[2]
strsplit(as.character(ms[[1]]$call)[2], " ~ ")[[1]][2]
strsplit(strsplit(as.character(ms[[1]]$call)[2], " ~ ")[[1]][2], " + ")
strsplit(strsplit(as.character(ms[[1]]$call)[2], " ~ ")[[1]][2], " + ", fixed=T)
strsplit(strsplit(as.character(ms[[1]]$call)[2], " ~ ")[[1]][2], " + ", fixed=T)[[1]]
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
sums <- summarize_null_models(ms, df)
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
sums <- summarize_null_models(ms, df)
coef_tab(sums)
pred_tab(sums)
sums[[1]]
coef_tab(sums)
roxygen2::roxygenize()
rm(list = c("coef_plot", "coef_tab", "effect_plot", "get_variogram", "pred_tab", "prepare_data", "rotate", "shift", "shift_rotate", "simulate_data", "simulate_null_models", "summarize_model", "summarize_null_models", "tabulate_metric"))
roxygen2::roxygenize()
# predictor parameters
scale.pred <- 50
var.pred <- 1
kappa.pred <- 1.5
mod.pred <- RMwhittle(nu=kappa.pred, var=var.pred, scale=scale.pred)
# response parameters
scale.resp <- 50
var.resp <- 1
kappa.resp <- 1.5
alpha <- 1
mod.resp <- RMwhittle(nu=kappa.resp, var=var.resp, scale=scale.resp)
# plot rasters
r.pred <- RFsimulate(mod.pred, x=0:100, y=0:100, grid=T) %>% st_as_stars
r2.pred <- RFsimulate(mod.pred, x=0:100, y=0:100, grid=T) %>% st_as_stars
r.resp <- r.pred + alpha*(RFsimulate(mod.resp, x=0:100, y=0:100, grid=T) %>% st_as_stars)
tmap_arrange(
tm_shape(r.pred) + tm_raster(style="cont"),
tm_shape(r.resp) + tm_raster(style="cont")
)
# data
x <- runif(100, 0, 100)
y <- runif(100, 0, 100)
p1 <- st_extract(r.pred, cbind(x,y))$variable1
p2 <- st_extract(r2.pred, cbind(x,y))$variable1
response <- p1 + alpha*st_extract(r.resp, cbind(x,y))$variable1
df <- data.frame(x=x, y=y, p1=p1, response=response, p2=p2)
plot(p1,response)
plot(p2,response)
cor.test(p1, response)
cor.test(p2, response)
plot(df %>% st_as_sf(coords=c("x","y")) %>% st_geometry)
df2 <- df %>% shift_rotate
df3 <- df %>% shift_rotate
plot(df2 %>% st_as_sf(coords=c("x","y")) %>% st_geometry, add=T, col="red")
plot(df3 %>% st_as_sf(coords=c("x","y")) %>% st_geometry, add=T, col="green")
?shift_rotate
cos(1)
cos(pi)
cos(pi/2)
cos(pi)
cos(2*pi)
cos(0)
View(df)
summary(df)
diff(range(rnorm(100)))
diff(range(df$x))
5 % 2
5 %% 2
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
m.lm <- lm(response~p1+p2, data=df)
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(predictor=r.pred), method='rotate_warp')
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(predictor=r.pred), method='rotate_warp')
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(predictor=r.pred), method='rotate_warp')
df4 <- df %>% rotate_warp
View(df4)
plot(df %>% st_bbox, add=T)
plot(df %>% st_as_sf(coords=c("x","y")) %>% st_bbox, add=T)
plot(df %>% st_as_sf(coords=c("x","y")) %>% st_geometry)
plot(df %>% st_as_sf(coords=c("x","y")) %>% st_bbox)
plot(df %>% st_as_sf(coords=c("x","y")) %>% st_geometry, add=T)
df %>% st_as_sf(coords=c("x","y")) %>% st_bbox
plot(df %>% st_as_sf(coords=c("x","y")) %>% st_bbox %>% st_as_sf)
st_as_sfc(st_bbox(df %>% st_as_sf(coords=c("x","y"))))
plot(st_as_sfc(st_bbox(df %>% st_as_sf(coords=c("x","y")))))
plot(st_as_sfc(st_bbox(df %>% st_as_sf(coords=c("x","y")))))
plot(df %>% st_as_sf(coords=c("x","y")) %>% st_geometry, add=T)
df4 <- df %>% rotate_warp
plot(df4 %>% st_as_sf(coords=c("x","y")) %>% st_geometry, add=T, col="green")
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(predictor=r.pred), method='rotate_warp')
# plot rasters
r.pred <- RFsimulate(mod.pred, x=0:100, y=0:100, grid=T) %>% st_as_stars
r2.pred <- RFsimulate(mod.pred, x=0:100, y=0:100, grid=T) %>% st_as_stars
r.resp <- r.pred + alpha*(RFsimulate(mod.resp, x=0:100, y=0:100, grid=T) %>% st_as_stars)
# data
x <- runif(100, 0, 100)
y <- runif(100, 0, 100)
p1 <- st_extract(r.pred, cbind(x,y))$variable1
p2 <- st_extract(r2.pred, cbind(x,y))$variable1
response <- p1 + alpha*st_extract(r.resp, cbind(x,y))$variable1
df <- data.frame(x=x, y=y, p1=p1, response=response, p2=p2)
source("R/simulate_null_models.R")
source("R/summarize_null_models.R")
m.lm <- lm(response~p1+p2, data=df)
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(predictor=r.pred), method='rotate_warp')
data=df
coords=c("x","y")
radius=NULL
newdata <- rotate_warp(data, coords, radius = radius)
for (pred in preds){
newdata[,pred] <- st_extract(pred_ras[[pred]], cbind(newdata[,coords[1]],newdata[,coords[2]]))[[1]]
}
model=m.lm
preds <- attr(model$terms , "term.labels")
preds <- preds[preds %in% colnames(data) & !(preds %in% coords)]
for (pred in preds){
newdata[,pred] <- st_extract(pred_ras[[pred]], cbind(newdata[,coords[1]],newdata[,coords[2]]))[[1]]
}
preds
pred_ras = list(p1=r.pred, p2=r2.pred)
for (pred in preds){
newdata[,pred] <- st_extract(pred_ras[[pred]], cbind(newdata[,coords[1]],newdata[,coords[2]]))[[1]]
}
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(p1=r.pred), method='rotate_warp')
ms <- simulate_null_models(m, df, radius = 100, pred_ras=list(p1=r.pred, p2=r2.pred), method='rotate_warp')
